Skip to content
Skip to breadcrumbs
Skip to header menu
Skip to action menu
Skip to quick search
Quick Search
Search
Browse
Pasternak, Pawel
Dashboard
 
Engineering Public Documentation
 
…
 
AOAG Manual Creation - Additional Node
Share
Add
Tools
AOAG Manual Creation - Additional Node
Skip to end of metadata
Added by Franke, Ross, last edited by Franke, Ross on Dec 01, 2015  (view change) Go to start of metadata

This procedure describes how to pseudo-manually add an additional server/node to an existing cluster & AlwaysOn Availabity Group (AOAG).  For the creation of an initial cluster & AlwaysOn Availabity Group (AOAG) refer to https://confluence.savvis.net/x/vtbMBg

	Notes
The instance names of all MSSQL instances (local to each server) in an AOAG can be the same or different.
AOAGs require the Enterprise Edition of MSSQL versions 2012, 2014 & 2016, although Windows 2008+ (Std. or Ent. edition) can be utilized for the cluster nodes' OS (same version for all nodes).
The location/path of individual databases to be joined to the AG/replicated must be identical. Example: data & tlog files for database 'replicateMe01' must exist in D:\blah\data on all participating MSSQL instances.
If one or more CLC servers are to partake in the AOAG, at least 2 "floating" IPs must be retrieved from the CLC control portal & server(s): a cluster name IP & AOAG listener IP.  Use this procedure to get each IP: AOAG Get Floating IP From CLC
 

Install a stand-alone MSSQL instance on the server
MSSQL 2014 - Automated Installation using HP SA
MSSQL 2012 - Automated Installation using HP SA
Bind persistent routes to specific interface(s)
Execute the following powershell lines:

$persistentRoutesScript = 'c:\xfer\bindPersistentRoutes.ps1'; 
foreach ($route in gwmi win32_ip4persistedroutetable) {$interfaceIndex = (gwmi win32_ip4routetable | where destination -eq $route.destination).interfaceindex; add-content $persistentRoutesScript "route delete $($route.destination) mask $($route.mask) $($route.nextHop) -p"; add-content $persistentRoutesScript "route add    $($route.destination) mask $($route.mask) $($route.nextHop) if $($interfaceIndex) -p"}; 
invoke-expression $persistentRoutesScript; 
write-host "Executed route commands have been logged to $($persistentRoutesScript)"
#
Add failover cluster features
Execute the following powershell line in the previously-used powershell window/session (for variable persistence):

import-module ServerManager 
add-windowsfeature Failover-Clustering, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, RSAT-Clustering-CmdInterface -errorAction stop
#
Test node for clustering
Execute the following powershell lines in the previously-used powershell window/session (for variable persistence) after substituting the value for clusterName:

$clusterName = "provide_the_existing_cluster_name_to_join_here" # <---------- SUBSTITUTION REQUIRED
$clusterNodes = get-clusternode -cluster $clusterName | where {$_.name -ne $env:computername}
$clusterNodesToTest = $env:computername 
foreach ($node in $clusterNodes.name) {$clusterNodesToTest = $clusterNodesToTest + ',' + $node}
$testcmd = "test-cluster -cluster $clusterName -node $clusterNodesToTest -ignore storage"
invoke-expression $testcmd
#
If warnings result from the test, open the report file (path in output; open with local IE) & analyze output
If "Cluster Quorum Configuration" warning: "The cluster is not configured with a quorum witness"
A quorum fileshare is recommended, but not required at this stage if this is the 2nd node in the cluster.
If "Validate Multiple Subnet Properties" warning:
"The HostRecordTTL property for network name _ is set to 300 ( 5 minutes). For local clusters the suggested value is 1200 (20 minutes)."
This is expected due to previous listener configuration
"The RegisterAllProvidersIP property for network name_ is set to 1. For the current cluster configuration this value should be set to 0."
This is expected.  This can be modified in the future if client apps require.
If "Validate Network Communication" warning: "Node _ is reachable from Node _ by only one pair of network interfaces."
Although not ideal, this can be expected for single-NIC VMs
Join node to the existing cluster
Execute the following powershell line in the previously-used powershell window/session (for variable persistence):

add-clusterNode -name @($env:computername) -cluster $clusterName
#
If the new server is in a different subnet than that of the initial/existing server(s), an additional cluster vIP & AG listener vIP assigned from the new subnet must be added to the cluster config for those 2 resources.
Add an additional IP, provisioned from the new subnet, to the Cluster Name resource:
Launch cluadmin.msc (Failover Cluster Manager)
Select/highlight the cluster name from the left pane, and in the middle pane expand "Cluster Core Resources" (at the very bottom)
Right-click the "Server Name" (the cluster name) --> select "Properties" from the context menu
Under "IP Addresses", click "Add" - enter the IP provisioned from the new subnet for the cluster name
Add an additional IP, provisioned from the new subnet, to the AG Listener name:
In cluadmin.msc (Failover Cluster Manager), select/highlight "Roles" from the left pane
Select/highlight the the AG role --> go to the "Resources" tab
Right-click the "Server Name" (the AG name) --> select "Properties" from the context menu
Under "IP Addresses", click "Add" - enter the IP provisioned from the new subnet for the AG listener
Enable AlwaysOn on the MSSQL instance
Execute the following powershell lines in the previously-used powershell window/session (for variable persistence) after substituting the value for instanceName:

$instancename = "provide_the_instance_name_here" # <---------- SUBSTITUTION REQUIRED: if the instance is a default instance, enter "DEFAULT"
enable-sqlalwayson -path "SQLSERVER:\SQL\$env:computername\$instancename" -force
#
Create SQL login & user for each AG-participating server on all AG-participating servers
Create login & user for the initial/existing server on this new/additional server:
Execute the following TSQL on the new/additional server's SQL instance after substituting a secure password string for ExistingServerHostName, ExistingServerInstanceName & ReplicationLoginPassword:

DECLARE @ExistingServerHostName     NVARCHAR(128) = 'serverName_of_existing_replica'     -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw01'
DECLARE @ExistingServerInstanceName NVARCHAR(128) = 'instanceName_of_existing_replica'   -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
DECLARE @ReplicationLoginPassword   NVARCHAR(128) = 'eNTerRAnd0mP@$swordH3re'            -- <---SUBSTITUTION REQUIRED
--
DECLARE @nodeLogin NVARCHAR(128) = 'AG_NODE_'+@ExistingServerHostName+'_'+@ExistingServerInstanceName   --ex: AG_NODE_S123456DC9SW99_INSTANCE9
DECLARE @cmd NVARCHAR(1024) = '
USE [master]
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = '''+@nodeLogin+''')
BEGIN
    CREATE LOGIN ['+@nodeLogin+'] WITH PASSWORD = '''+@ReplicationLoginPassword+'''
    EXEC sp_addsrvrolemember '''+@nodeLogin+''', ''sysadmin''
    CREATE USER '+@nodeLogin+' FOR LOGIN '+@nodeLogin+'
END
'
EXEC sp_executesql @cmd
--
If more than 1 replica already exists in the AG, repeat this step on the new/additional SQL instance for each, substituting the host & instance name variable strings to create a login & user on the new replica for each existing replica.
Execute the following TSQL on the existing/initial server's SQL instance after substituting the strings for NewServerName and ReplicationLoginPassword:

DECLARE @NewServerHostName        NVARCHAR(128) = 'serverName_of_new_replica'   -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw02'
DECLARE @NewServerInstanceName    NVARCHAR(128) = 'instanceName_of_new_replica' -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD02'
DECLARE @ReplicationLoginPassword NVARCHAR(128) = 'eNTerRAnd0mP@$swordH3re'     -- <---SUBSTITUTION REQUIRED
--
DECLARE @nodeLogin NVARCHAR(128) = 'AG_NODE_'+@NewServerHostName+'_'+@NewServerInstanceName   --ex: AG_NODE_S123456DC9SW99_INSTANCE9
DECLARE @cmd NVARCHAR(1024) = '
USE [master]
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = '''+@nodeLogin+''')
BEGIN
    CREATE LOGIN ['+@nodeLogin+'] WITH PASSWORD = '''+@ReplicationLoginPassword+'''
    EXEC sp_addsrvrolemember '''+@nodeLogin+''', ''sysadmin''
    CREATE USER '+@nodeLogin+' FOR LOGIN '+@nodeLogin+'
END
'
EXEC sp_executesql @cmd
--
If more than 1 replica already exists in the AG, run this same command on each existing replica SQL instance to create a login & user for the new replica on all existing replicas.
Create Mirroring endpoint
Execute the following TSQL:

DECLARE @nodeEndpoint NVARCHAR(128) = (SELECT @@servername)
IF @nodeEndpoint LIKE '%\%' SET @nodeEndpoint = LEFT(@nodeEndpoint, CHARINDEX('\', @nodeEndpoint) - 1)
DECLARE @cmd NVARCHAR(1024) = '
IF NOT EXISTS (SELECT [name] FROM sys.endpoints WHERE [name] = '''+@nodeEndpoint+''') 
        CREATE ENDPOINT ['+@nodeEndpoint+'] STATE=STARTED AS TCP (LISTENER_PORT=5022, LISTENER_IP=ALL) 
        FOR DATABASE_MIRRORING (ROLE=ALL)
'
EXEC sp_executesql @cmd
If this command fails with the message "The Database Mirroring endpoint cannot listen on port 5022 because it is in use by another process", this means a DB mirror or another AG already exists on the server.  Simply increment "LISTENER_PORT=" from 5022 to 5023, 5024, etc. until it works.  Whatever port is used, note it & replace all occurrences of "5022" in this procedure (and the "Additional Node" procedure) with the alt port.
Grant connect permission on the mirroring endpoints to the new logins just created
On the new/additional SQL instance execute the following TSQL after substituting ExistingServerHostName & ExistingServerInstanceName:

DECLARE @ExistingServerHostName     NVARCHAR(128) = 'serverName_of_existing_replica'     -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw01'
DECLARE @ExistingServerInstanceName NVARCHAR(128) = 'instanceName_of_existing_replica'   -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
--
DECLARE @ExistingServerLogin NVARCHAR(128) = 'AG_NODE_'+@ExistingServerHostName+'_'+@ExistingServerInstanceName   --ex: AG_NODE_S123456DC9SW01_INSTANCENAME
DECLARE @NewServerEndpoint NVARCHAR(128) = (SELECT @@servername)
IF @NewServerEndpoint LIKE '%\%' SET @NewServerEndpoint = LEFT(@NewServerEndpoint, CHARINDEX('\', @NewServerEndpoint) - 1)
DECLARE @cmd NVARCHAR(1024) = '
GRANT CONNECT ON ENDPOINT::['+@NewServerEndpoint+'] TO ['+@ExistingServerLogin+']
'
EXEC sp_executesql @cmd
On the initial/existing SQL instance execute the following TSQL after substituting NewServerHostName & NewServerInstanceName:

DECLARE @NewServerHostName     NVARCHAR(128) = 'serverName_of_New_replica'     -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw01'
DECLARE @NewServerInstanceName NVARCHAR(128) = 'instanceName_of_New_replica'   -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
--
DECLARE @NewServerLogin NVARCHAR(128) = 'AG_NODE_'+@NewServerHostName+'_'+@NewServerInstanceName   --ex: AG_NODE_S123456DC9SW01_INSTANCENAME
DECLARE @NewServerEndpoint NVARCHAR(128) = (SELECT @@servername)
IF @NewServerEndpoint LIKE '%\%' SET @NewServerEndpoint = LEFT(@NewServerEndpoint, CHARINDEX('\', @NewServerEndpoint) - 1)
DECLARE @cmd NVARCHAR(1024) = '
GRANT CONNECT ON ENDPOINT::['+@NewServerEndpoint+'] TO ['+@NewServerLogin+']
'
EXEC sp_executesql @cmd
 Ensure temp folder exists to store a yet-to-be-created certificate backup, and remove an existing soon-to-be-duplicate backup if one exists
Execute the following powershell lines in the previously-used powershell window/session (for variable persistence):

if ($instancename -eq 'default') {$instancename_alt = 'MSSQLSERVER'} else {$instancename_alt = $instancename}
$certBackupPathFile = 'c:\xfer\tempCertStore\AG_CERT_'+$env:computername+'_'+$instancename_alt+'.cer'
if (!(test-path 'c:\xfer\tempCertStore')) {new-item 'c:\xfer\tempCertStore' -itemType directory} else {if (test-path $certBackupPathFile) {remove-item $certBackupPathFile}}
#
 Create the master certificate (key) for the MSSQL instance, then backup the certificate to disk
Execute the following TSQL after substituting a secure password string for @SQLInstanceMasterKeyPassword:

DECLARE @SQLInstanceMasterKeyPassword NVARCHAR(128) = 'eNTerRAnd0mP@$swordH3re'  -- <---INPUT REQUIRED
--
DECLARE @nodeHostname NVARCHAR(128) = (SELECT @@servername)
IF @nodeHostname LIKE '%\%' SET @nodeHostname = LEFT(@nodeHostname, CHARINDEX('\', @nodeHostname) - 1)
DECLARE @certName NVARCHAR(128) = 'AG_CERT_'+host_name()+'_'+@@servicename       -- example result: AG_CERT_S123456DC9SW99_INSTANCE9
DECLARE @certBackupPathFile NVARCHAR(256) = 'c:\xfer\tempCertStore\'+@certName+'.cer'
DECLARE @cmd NVARCHAR(1024)
USE [master] 
SET @cmd = '
    IF NOT EXISTS (SELECT [name] FROM sys.symmetric_keys WHERE [name] = ''##MS_DatabaseMasterKey##'') 
        CREATE MASTER KEY ENCRYPTION BY PASSWORD='''+@SQLInstanceMasterKeyPassword+'''
    IF NOT EXISTS (SELECT [name] FROM sys.certificates WHERE [name] = '''+@certName+''') 
        CREATE CERTIFICATE '+@certName+'
        WITH SUBJECT=''AlwaysOn certificate for '+@nodeHostname+''', EXPIRY_DATE=''12/31/2033''
    IF NOT EXISTS (SELECT [name] FROM sys.endpoints WHERE [name] = '''+@nodeHostname+''') 
        CREATE ENDPOINT ['+@nodeHostname+'] STATE=STARTED AS TCP (LISTENER_PORT=5022, LISTENER_IP=ALL) 
        FOR DATABASE_MIRRORING (ROLE=ALL, AUTHENTICATION=CERTIFICATE '+@certName+', ENCRYPTION=REQUIRED ALGORITHM AES)
    BACKUP CERTIFICATE '+@certname+' TO FILE='''+@certBackupPathFile+'''
'
EXEC sp_executesql @cmd
--
 Propagate certificate backup files among nodes in the cluster
Copy all *.cer files in C:\xfer\tempCertStore on the new/additional server to C:\tempCertStore on all other AG-participating servers in the cluster
Copy all *.cer files in C:\xfer\tempCertStore on the initial/existing server(s) to C:\tempCertStore on the new/additional server
 Create MSSQL certificates on all instances from the propagated certificate backup files
Execute the following TSQL on the new/additional server after substituting ExistingServerHostName and ExistingServerInstanceName:

DECLARE @ExistingServerHostName     NVARCHAR(128) = 'serverName_of_existing_replica'   -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw01'
DECLARE @ExistingServerInstanceName NVARCHAR(128) = 'instanceName_of_existing_replica' -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
--
DECLARE @ExistingServerLogin        NVARCHAR(128) = 'AG_NODE_'+@ExistingServerHostName+'_'+@ExistingServerInstanceName   --ex: AG_NODE_S123456DC9SW02_INSTNAME
DECLARE @ExistingServerCertName     NVARCHAR(128) = 'AG_CERT_'+@ExistingServerHostName+'_'+@ExistingServerInstanceName   -- example result: AG_CERT_S123456DC9SW02_INSTNAME
DECLARE @ExistingServerCertPath     NVARCHAR(256) = 'c:\xfer\tempCertStore\'+@ExistingServerCertName+'.cer'
DECLARE @NewServerEndpoint          NVARCHAR(256) = (SELECT @@servername)
IF @NewServerEndpoint LIKE '%\%' SET @NewServerEndpoint = LEFT(@NewServerEndpoint, CHARINDEX('\', @NewServerEndpoint) - 1)
DECLARE @cmd NVARCHAR(1024) = '
USE [master]
IF NOT EXISTS (SELECT [name] FROM sys.certificates WHERE [name] = '''+@ExistingServerCertName+''')
CREATE CERTIFICATE '+@ExistingServerCertName+'
AUTHORIZATION '+@ExistingServerLogin+'
FROM FILE = '''+@ExistingServerCertPath+'''
'
EXEC sp_executesql @cmd
--
If more than 1 replica already exists in the AG, repeat this step on the new/additional SQL instance for each, substituting the host & instance name variable strings to create a certificate on the new replica for each existing replica
Execute the following TSQL on the initial/existing server(s) after substituting appropriate values for NewServerHostname & NewServerInstanceName:

DECLARE @NewServerHostName      NVARCHAR(128) = 'serverName_of_New_replica'   -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw01'
DECLARE @NewServerInstanceName  NVARCHAR(128) = 'instanceName_of_New_replica' -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
--
DECLARE @NewServerLogin         NVARCHAR(128) = 'AG_NODE_'+@NewServerHostName+'_'+@NewServerInstanceName   --ex: AG_NODE_S123456DC9SW01_INSTNAME
DECLARE @NewServerCertName      NVARCHAR(128) = 'AG_CERT_'+@NewServerHostName+'_'+@NewServerInstanceName   -- example result: AG_CERT_S123456DC9SW01_INSTNAME
DECLARE @NewServerCertPath      NVARCHAR(256) = 'c:\xfer\tempCertStore\'+@NewServerCertName+'.cer'
DECLARE @ExistingServerEndpoint NVARCHAR(256) = (SELECT @@servername)
IF @ExistingServerEndpoint LIKE '%\%' SET @ExistingServerEndpoint = LEFT(@ExistingServerEndpoint, CHARINDEX('\', @ExistingServerEndpoint) - 1)
DECLARE @cmd NVARCHAR(1024) = '
USE [master]
IF NOT EXISTS (SELECT [name] FROM sys.certificates WHERE [name] = '''+@NewServerCertName+''')
CREATE CERTIFICATE '+@NewServerCertName+'
AUTHORIZATION '+@NewServerLogin+'
FROM FILE = '''+@NewServerCertPath+'''
'
EXEC sp_executesql @cmd
--
If more than 1 replica already exists in the AG, run this same command on each existing replica SQL instance to create a certificate for the new replica on all existing replicas.
Verify the SQL Server Browser Service is started and configured to automatically start
Execute the following powershell lines in the previously-used powershell window/session (for variable persistence):

$sqlBrowserService = get-wmiObject -class win32_service -property name, startmode, state | where-object {$_.name -eq "sqlbrowser"} 
if ($sqlBrowserService.startmode -ne "automatic") {set-service sqlbrowser -startuptype automatic} 
if ($sqlBrowserService.state -eq "stopped") {start-service sqlbrowser} 
#
Add the new/additional node to the existing Availability Group
Execute the following TSQL on the initial/existing server after substituting appropriate values for NewServerHostName, NewServerInstanceName, AGName, AGAvailabilitymode & AGFailoverMode:

DECLARE @NewServerHostName     NVARCHAR(128) = 'serverName_of_new_replica'   -- <---SUBSTITUTION REQUIRED  example: 's123456dc9sw02'
DECLARE @NewServerInstanceName NVARCHAR(128) = 'instanceName_of_new_replica' -- <---SUBSTITUTION REQUIRED  example: 'DEFAULT' or 'PROD01'
DECLARE @AGName                NVARCHAR(128) = 'name_of_availabilityGroup'   -- <---SUBSTITUTION REQUIRED
DECLARE @AGAvailabilityMode    NVARCHAR(19)  = 'asynchronous_commit'         -- <---POSSIBLE SUBSTITUTION REQUIRED
    -- possible options:
    --     'asynchronous_commit'
    --     'synchronous_commit'
DECLARE @AGFailoverMode NVARCHAR(9) = 'manual'                               -- <---POSSIBLE INPUT REQUIRED
    -- possible options:
    --     'manual'
    --     'automatic' <--only possible if @AGAvailabilityMode = 'synchronous_commit'
--
DECLARE @NewSQLServerName NVARCHAR(128) = @NewServerHostName
IF @NewServerInstanceName <> 'DEFAULT'
SET @NewSQLServerName = @NewServerHostName+'\'+@NewServerInstanceName
DECLARE @cmd NVARCHAR(1024) = '
IF NOT EXISTS (
SELECT RCS.replica_server_name FROM sys.dm_hadr_availability_replica_cluster_states AS RCS
JOIN sys.dm_hadr_availability_replica_states AS ARS ON ARS.replica_id = RCS.replica_id
WHERE RCS.replica_server_name = '''+@NewSQLServerName+'''
)
BEGIN
    ALTER AVAILABILITY GROUP '+@AGName+' ADD REPLICA ON '''+@NewSQLServerName+''' WITH (
        ENDPOINT_URL = ''TCP://'+@NewServerHostName+':5022'',
        AVAILABILITY_MODE = '+@AGAvailabilityMode+',
        FAILOVER_MODE = '+@AGFailoverMode+'
    )
END
'
EXEC sp_executesql @cmd
--
Join the new replica to the AG
Execute the following TSQL on the new/additional server after substituting an appropriate value for AGName

DECLARE @AGName NVARCHAR(128) = 'name_of_availabilityGroup_to_join' -- <---INPUT REQUIRED
--
DECLARE @cmd NVARCHAR(1024) = 'ALTER AVAILABILITY GROUP '+@AGName+' JOIN'
EXEC sp_executesql @cmd
--
Verify the MSSQL instance's SQL Agent service is started
Execute the following powershell lines in the previously-used powershell window/session (for variable persistence):

if ($instancename -eq "default") {$SqlAgentServiceName = "SQLSERVERAGENT"} else {$SqlAgentServiceName = "SQLAgent`$$instancename"}
start-service $SqlAgentServiceName
#
LikeBe the first to like this	Labels	
None Edit Labels

Powered by Atlassian Confluence 4.2.13, the Enterprise Wiki  ·  Report a bug  ·  Atlassian News
Choose Files